// Code generated by mockery. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

type Engine_Expecter struct {
	mock *mock.Mock
}

func (_m *Engine) EXPECT() *Engine_Expecter {
	return &Engine_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *Engine) Close(ctx context.Context) {
	_m.Called(ctx)
}

// Engine_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Engine_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Engine_Expecter) Close(ctx interface{}) *Engine_Close_Call {
	return &Engine_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *Engine_Close_Call) Run(run func(ctx context.Context)) *Engine_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Engine_Close_Call) Return() *Engine_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Engine_Close_Call) RunAndReturn(run func(context.Context)) *Engine_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: ctx, key
func (_m *Engine) Del(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Engine_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type Engine_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Engine_Expecter) Del(ctx interface{}, key interface{}) *Engine_Del_Call {
	return &Engine_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *Engine_Del_Call) Run(run func(ctx context.Context, key string)) *Engine_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Engine_Del_Call) Return(_a0 error) *Engine_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_Del_Call) RunAndReturn(run func(context.Context, string) error) *Engine_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function with given fields:
func (_m *Engine) Done() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Engine_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type Engine_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *Engine_Expecter) Done() *Engine_Done_Call {
	return &Engine_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *Engine_Done_Call) Run(run func()) *Engine_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Engine_Done_Call) Return(_a0 <-chan struct{}) *Engine_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_Done_Call) RunAndReturn(run func() <-chan struct{}) *Engine_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *Engine) Get(ctx context.Context, key string) (interface{}, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Engine_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Engine_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Engine_Expecter) Get(ctx interface{}, key interface{}) *Engine_Get_Call {
	return &Engine_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Engine_Get_Call) Run(run func(ctx context.Context, key string)) *Engine_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Engine_Get_Call) Return(_a0 interface{}, _a1 error) *Engine_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Engine_Get_Call) RunAndReturn(run func(context.Context, string) (interface{}, error)) *Engine_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *Engine) Set(ctx context.Context, key string, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Engine_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Engine_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
func (_e *Engine_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *Engine_Set_Call {
	return &Engine_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *Engine_Set_Call) Run(run func(ctx context.Context, key string, value interface{})) *Engine_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *Engine_Set_Call) Return(_a0 error) *Engine_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_Set_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *Engine_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewEngine creates a new instance of Engine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *Engine {
	mock := &Engine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
