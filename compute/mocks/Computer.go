// Code generated by mockery. DO NOT EDIT.

package compute

import (
	context "context"

	query "github.com/sattellite/bcdb/compute/query"
	mock "github.com/stretchr/testify/mock"

	result "github.com/sattellite/bcdb/compute/result"
)

// Computer is an autogenerated mock type for the Computer type
type Computer struct {
	mock.Mock
}

type Computer_Expecter struct {
	mock *mock.Mock
}

func (_m *Computer) EXPECT() *Computer_Expecter {
	return &Computer_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, q
func (_m *Computer) Handle(ctx context.Context, q query.Query) (result.Result, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 result.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.Query) (result.Result, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.Query) result.Result); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(result.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.Query) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Computer_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Computer_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - q query.Query
func (_e *Computer_Expecter) Handle(ctx interface{}, q interface{}) *Computer_Handle_Call {
	return &Computer_Handle_Call{Call: _e.mock.On("Handle", ctx, q)}
}

func (_c *Computer_Handle_Call) Run(run func(ctx context.Context, q query.Query)) *Computer_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(query.Query))
	})
	return _c
}

func (_c *Computer_Handle_Call) Return(_a0 result.Result, _a1 error) *Computer_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Computer_Handle_Call) RunAndReturn(run func(context.Context, query.Query) (result.Result, error)) *Computer_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with given fields: input
func (_m *Computer) Parse(input string) (*query.Query, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *query.Query
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*query.Query, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(string) *query.Query); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*query.Query)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Computer_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type Computer_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - input string
func (_e *Computer_Expecter) Parse(input interface{}) *Computer_Parse_Call {
	return &Computer_Parse_Call{Call: _e.mock.On("Parse", input)}
}

func (_c *Computer_Parse_Call) Run(run func(input string)) *Computer_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Computer_Parse_Call) Return(_a0 *query.Query, _a1 error) *Computer_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Computer_Parse_Call) RunAndReturn(run func(string) (*query.Query, error)) *Computer_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function with given fields: r
func (_m *Computer) Print(r result.Result) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Print")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(result.Result) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Computer_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type Computer_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - r result.Result
func (_e *Computer_Expecter) Print(r interface{}) *Computer_Print_Call {
	return &Computer_Print_Call{Call: _e.mock.On("Print", r)}
}

func (_c *Computer_Print_Call) Run(run func(r result.Result)) *Computer_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(result.Result))
	})
	return _c
}

func (_c *Computer_Print_Call) Return(_a0 error) *Computer_Print_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Computer_Print_Call) RunAndReturn(run func(result.Result) error) *Computer_Print_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *Computer) Run(ctx context.Context) {
	_m.Called(ctx)
}

// Computer_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Computer_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Computer_Expecter) Run(ctx interface{}) *Computer_Run_Call {
	return &Computer_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *Computer_Run_Call) Run(run func(ctx context.Context)) *Computer_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Computer_Run_Call) Return() *Computer_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *Computer_Run_Call) RunAndReturn(run func(context.Context)) *Computer_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewComputer creates a new instance of Computer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComputer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Computer {
	mock := &Computer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
